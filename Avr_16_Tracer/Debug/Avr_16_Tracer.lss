
Avr_16_Tracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000078e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000078e  00000822  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  0080007a  0080007a  0000083c  2**0
                  ALLOC
  3 .stab         00001be4  00000000  00000000  0000083c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000067f  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002a9f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00002ace  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000046a  00000000  00000000  00002b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000207  00000000  00000000  00002fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000441  00000000  00000000  000031e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000148  00000000  00000000  00003628  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000191  00000000  00000000  00003770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001bc  00000000  00000000  00003901  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  00003abd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3a       	cpi	r26, 0xAA	; 170
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a9 01 	call	0x352	; 0x352 <main>
  8a:	0c 94 c5 03 	jmp	0x78a	; 0x78a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
		usart_time = 0;
		USART_TEST();
	}
}*/
SIGNAL(INT0_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
	PORTC=0x00;
  9c:	15 ba       	out	0x15, r1	; 21
	calib_flg=0;
  9e:	10 92 70 00 	sts	0x0070, r1
	
	
} 
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <__vector_14>:
{
	PORTC=0x02;
	
}*/
SIGNAL(ADC_vect)
{
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
  ba:	ef 93       	push	r30
  bc:	ff 93       	push	r31
	led_value[j++]=ADCH;
  be:	80 91 84 00 	lds	r24, 0x0084
  c2:	e8 2f       	mov	r30, r24
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	95 b1       	in	r25, 0x05	; 5
  c8:	e6 56       	subi	r30, 0x66	; 102
  ca:	ff 4f       	sbci	r31, 0xFF	; 255
  cc:	90 83       	st	Z, r25
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	80 93 84 00 	sts	0x0084, r24
	if(j==8)
  d4:	80 91 84 00 	lds	r24, 0x0084
  d8:	88 30       	cpi	r24, 0x08	; 8
  da:	11 f4       	brne	.+4      	; 0xe0 <__vector_14+0x34>
	j=0;
  dc:	10 92 84 00 	sts	0x0084, r1
	ADMUX=0x60+j;
  e0:	80 91 84 00 	lds	r24, 0x0084
  e4:	80 5a       	subi	r24, 0xA0	; 160
  e6:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0xcc;
  e8:	8c ec       	ldi	r24, 0xCC	; 204
  ea:	86 b9       	out	0x06, r24	; 6
}
  ec:	ff 91       	pop	r31
  ee:	ef 91       	pop	r30
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <calibration>:
	
	

}*/
void calibration (void)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
	
	
			PORTC=0x01;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	85 bb       	out	0x15, r24	; 21
			
			int i;
			for(i=0;i<8;i++)
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
				{
					led_low[i]=led_value[i];
				
				}
				led_average[i]=led_max[i]-led_low[i];
				average[8]=((led_max[i]+led_low[i])/2);
 10a:	45 e9       	ldi	r20, 0x95	; 149
 10c:	50 e0       	ldi	r21, 0x00	; 0
			PORTC=0x01;
			
			int i;
			for(i=0;i<8;i++)
			{
				if(led_value[i]>led_max[i])
 10e:	fc 01       	movw	r30, r24
 110:	e6 56       	subi	r30, 0x66	; 102
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	30 81       	ld	r19, Z
 116:	fc 01       	movw	r30, r24
 118:	e4 58       	subi	r30, 0x84	; 132
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	20 81       	ld	r18, Z
 11e:	23 17       	cp	r18, r19
 120:	40 f4       	brcc	.+16     	; 0x132 <calibration+0x34>
				{
					led_max[i]=led_value[i];
 122:	fc 01       	movw	r30, r24
 124:	e6 56       	subi	r30, 0x66	; 102
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	20 81       	ld	r18, Z
 12a:	fc 01       	movw	r30, r24
 12c:	e4 58       	subi	r30, 0x84	; 132
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	20 83       	st	Z, r18
				}
			
				if(led_value[i]<led_low[i])
 132:	fc 01       	movw	r30, r24
 134:	e6 56       	subi	r30, 0x66	; 102
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	30 81       	ld	r19, Z
 13a:	fc 01       	movw	r30, r24
 13c:	ef 58       	subi	r30, 0x8F	; 143
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
 140:	20 81       	ld	r18, Z
 142:	32 17       	cp	r19, r18
 144:	40 f4       	brcc	.+16     	; 0x156 <calibration+0x58>
				{
					led_low[i]=led_value[i];
 146:	fc 01       	movw	r30, r24
 148:	e6 56       	subi	r30, 0x66	; 102
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	20 81       	ld	r18, Z
 14e:	fc 01       	movw	r30, r24
 150:	ef 58       	subi	r30, 0x8F	; 143
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	20 83       	st	Z, r18
				
				}
				led_average[i]=led_max[i]-led_low[i];
 156:	dc 01       	movw	r26, r24
 158:	a4 58       	subi	r26, 0x84	; 132
 15a:	bf 4f       	sbci	r27, 0xFF	; 255
 15c:	2c 91       	ld	r18, X
 15e:	fc 01       	movw	r30, r24
 160:	ef 58       	subi	r30, 0x8F	; 143
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	30 81       	ld	r19, Z
 166:	23 1b       	sub	r18, r19
 168:	ec 01       	movw	r28, r24
 16a:	ce 55       	subi	r28, 0x5E	; 94
 16c:	df 4f       	sbci	r29, 0xFF	; 255
 16e:	28 83       	st	Y, r18
				average[8]=((led_max[i]+led_low[i])/2);
 170:	6c 91       	ld	r22, X
 172:	20 81       	ld	r18, Z
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	26 0f       	add	r18, r22
 178:	31 1d       	adc	r19, r1
 17a:	35 95       	asr	r19
 17c:	27 95       	ror	r18
 17e:	fa 01       	movw	r30, r20
 180:	20 83       	st	Z, r18
	
	
			PORTC=0x01;
			
			int i;
			for(i=0;i<8;i++)
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	88 30       	cpi	r24, 0x08	; 8
 186:	91 05       	cpc	r25, r1
 188:	11 f6       	brne	.-124    	; 0x10e <calibration+0x10>
				average[8]=((led_max[i]+led_low[i])/2);
			}
		
	
	
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <sensing>:
		UDR=0x0b;

	}
}*/
void sensing()
{
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
	int i;
	all_sum = 0;
 196:	10 92 7b 00 	sts	0x007B, r1
 19a:	10 92 7a 00 	sts	0x007A, r1
	for(i=0;i<8;i++)
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
		{
			led_low[i]=led_value[i];
			
		}
		led_average[i]=led_max[i]-led_low[i];
		led_val[i] = (unsigned char)(((led_value[i]-led_low[i])*100)/led_average[i]);
 1a2:	14 e6       	ldi	r17, 0x64	; 100
{
	int i;
	all_sum = 0;
	for(i=0;i<8;i++)
	{
		if(led_value[i]>led_max[i])
 1a4:	f9 01       	movw	r30, r18
 1a6:	e6 56       	subi	r30, 0x66	; 102
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	90 81       	ld	r25, Z
 1ac:	f9 01       	movw	r30, r18
 1ae:	e4 58       	subi	r30, 0x84	; 132
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	80 81       	ld	r24, Z
 1b4:	89 17       	cp	r24, r25
 1b6:	40 f4       	brcc	.+16     	; 0x1c8 <sensing+0x38>
		{
			led_max[i]=led_value[i];
 1b8:	f9 01       	movw	r30, r18
 1ba:	e6 56       	subi	r30, 0x66	; 102
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	80 81       	ld	r24, Z
 1c0:	f9 01       	movw	r30, r18
 1c2:	e4 58       	subi	r30, 0x84	; 132
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	80 83       	st	Z, r24
		}
		
		if(led_value[i]<led_low[i])
 1c8:	f9 01       	movw	r30, r18
 1ca:	e6 56       	subi	r30, 0x66	; 102
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	90 81       	ld	r25, Z
 1d0:	f9 01       	movw	r30, r18
 1d2:	ef 58       	subi	r30, 0x8F	; 143
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	80 81       	ld	r24, Z
 1d8:	98 17       	cp	r25, r24
 1da:	40 f4       	brcc	.+16     	; 0x1ec <sensing+0x5c>
		{
			led_low[i]=led_value[i];
 1dc:	f9 01       	movw	r30, r18
 1de:	e6 56       	subi	r30, 0x66	; 102
 1e0:	ff 4f       	sbci	r31, 0xFF	; 255
 1e2:	80 81       	ld	r24, Z
 1e4:	f9 01       	movw	r30, r18
 1e6:	ef 58       	subi	r30, 0x8F	; 143
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	80 83       	st	Z, r24
			
		}
		led_average[i]=led_max[i]-led_low[i];
 1ec:	f9 01       	movw	r30, r18
 1ee:	e4 58       	subi	r30, 0x84	; 132
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	80 81       	ld	r24, Z
 1f4:	d9 01       	movw	r26, r18
 1f6:	af 58       	subi	r26, 0x8F	; 143
 1f8:	bf 4f       	sbci	r27, 0xFF	; 255
 1fa:	9c 91       	ld	r25, X
 1fc:	89 1b       	sub	r24, r25
 1fe:	f9 01       	movw	r30, r18
 200:	ee 55       	subi	r30, 0x5E	; 94
 202:	ff 4f       	sbci	r31, 0xFF	; 255
 204:	80 83       	st	Z, r24
		led_val[i] = (unsigned char)(((led_value[i]-led_low[i])*100)/led_average[i]);
 206:	e9 01       	movw	r28, r18
 208:	c6 56       	subi	r28, 0x66	; 102
 20a:	df 4f       	sbci	r29, 0xFF	; 255
 20c:	48 81       	ld	r20, Y
 20e:	8c 91       	ld	r24, X
 210:	60 81       	ld	r22, Z
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	48 1b       	sub	r20, r24
 216:	51 09       	sbc	r21, r1
 218:	14 9f       	mul	r17, r20
 21a:	c0 01       	movw	r24, r0
 21c:	15 9f       	mul	r17, r21
 21e:	90 0d       	add	r25, r0
 220:	11 24       	eor	r1, r1
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	0e 94 9d 03 	call	0x73a	; 0x73a <__divmodhi4>
 228:	f9 01       	movw	r30, r18
 22a:	eb 57       	subi	r30, 0x7B	; 123
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	60 83       	st	Z, r22
		if(led_val[i]>100)led_val[i] = 100;
 230:	80 81       	ld	r24, Z
 232:	85 36       	cpi	r24, 0x65	; 101
 234:	20 f0       	brcs	.+8      	; 0x23e <sensing+0xae>
 236:	f9 01       	movw	r30, r18
 238:	eb 57       	subi	r30, 0x7B	; 123
 23a:	ff 4f       	sbci	r31, 0xFF	; 255
 23c:	10 83       	st	Z, r17
		all_sum += led_val[i];
 23e:	f9 01       	movw	r30, r18
 240:	eb 57       	subi	r30, 0x7B	; 123
 242:	ff 4f       	sbci	r31, 0xFF	; 255
 244:	40 81       	ld	r20, Z
 246:	80 91 7a 00 	lds	r24, 0x007A
 24a:	90 91 7b 00 	lds	r25, 0x007B
 24e:	84 0f       	add	r24, r20
 250:	91 1d       	adc	r25, r1
 252:	90 93 7b 00 	sts	0x007B, r25
 256:	80 93 7a 00 	sts	0x007A, r24
}*/
void sensing()
{
	int i;
	all_sum = 0;
	for(i=0;i<8;i++)
 25a:	2f 5f       	subi	r18, 0xFF	; 255
 25c:	3f 4f       	sbci	r19, 0xFF	; 255
 25e:	28 30       	cpi	r18, 0x08	; 8
 260:	31 05       	cpc	r19, r1
 262:	09 f0       	breq	.+2      	; 0x266 <sensing+0xd6>
 264:	9f cf       	rjmp	.-194    	; 0x1a4 <sensing+0x14>
		led_val[i] = (unsigned char)(((led_value[i]-led_low[i])*100)/led_average[i]);
		if(led_val[i]>100)led_val[i] = 100;
		all_sum += led_val[i];
		
	}
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	08 95       	ret

0000026e <Catch_position>:
void Catch_position(void)
{
 26e:	cf 92       	push	r12
 270:	df 92       	push	r13
 272:	ef 92       	push	r14
 274:	ff 92       	push	r15
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
	char i;
	position_temp = 0;
 27a:	10 92 95 00 	sts	0x0095, r1
 27e:	10 92 96 00 	sts	0x0096, r1
 282:	10 92 97 00 	sts	0x0097, r1
 286:	10 92 98 00 	sts	0x0098, r1
 28a:	c0 e0       	ldi	r28, 0x00	; 0
 28c:	d0 e0       	ldi	r29, 0x00	; 0
	
		for(i=0; i<8;i++)
		{
			 position_temp += (i+1)*led_val[i];
 28e:	fe 01       	movw	r30, r28
		if(led_val[i]>100)led_val[i] = 100;
		all_sum += led_val[i];
		
	}
}
void Catch_position(void)
 290:	21 96       	adiw	r28, 0x01	; 1
	char i;
	position_temp = 0;
	
		for(i=0; i<8;i++)
		{
			 position_temp += (i+1)*led_val[i];
 292:	eb 57       	subi	r30, 0x7B	; 123
 294:	ff 4f       	sbci	r31, 0xFF	; 255
 296:	80 81       	ld	r24, Z
 298:	c0 90 95 00 	lds	r12, 0x0095
 29c:	d0 90 96 00 	lds	r13, 0x0096
 2a0:	e0 90 97 00 	lds	r14, 0x0097
 2a4:	f0 90 98 00 	lds	r15, 0x0098
 2a8:	8c 9f       	mul	r24, r28
 2aa:	b0 01       	movw	r22, r0
 2ac:	8d 9f       	mul	r24, r29
 2ae:	70 0d       	add	r23, r0
 2b0:	11 24       	eor	r1, r1
 2b2:	88 27       	eor	r24, r24
 2b4:	77 fd       	sbrc	r23, 7
 2b6:	80 95       	com	r24
 2b8:	98 2f       	mov	r25, r24
 2ba:	0e 94 11 03 	call	0x622	; 0x622 <__floatsisf>
 2be:	a7 01       	movw	r20, r14
 2c0:	96 01       	movw	r18, r12
 2c2:	0e 94 17 02 	call	0x42e	; 0x42e <__addsf3>
 2c6:	46 2f       	mov	r20, r22
 2c8:	57 2f       	mov	r21, r23
 2ca:	68 2f       	mov	r22, r24
 2cc:	79 2f       	mov	r23, r25
 2ce:	40 93 95 00 	sts	0x0095, r20
 2d2:	50 93 96 00 	sts	0x0096, r21
 2d6:	60 93 97 00 	sts	0x0097, r22
 2da:	70 93 98 00 	sts	0x0098, r23
void Catch_position(void)
{
	char i;
	position_temp = 0;
	
		for(i=0; i<8;i++)
 2de:	c8 30       	cpi	r28, 0x08	; 8
 2e0:	d1 05       	cpc	r29, r1
 2e2:	a9 f6       	brne	.-86     	; 0x28e <Catch_position+0x20>
		{
			 position_temp += (i+1)*led_val[i];
			
		}
		position_temp = position_temp/all_sum;
 2e4:	c0 90 95 00 	lds	r12, 0x0095
 2e8:	d0 90 96 00 	lds	r13, 0x0096
 2ec:	e0 90 97 00 	lds	r14, 0x0097
 2f0:	f0 90 98 00 	lds	r15, 0x0098
 2f4:	60 91 7a 00 	lds	r22, 0x007A
 2f8:	70 91 7b 00 	lds	r23, 0x007B
 2fc:	88 27       	eor	r24, r24
 2fe:	77 fd       	sbrc	r23, 7
 300:	80 95       	com	r24
 302:	98 2f       	mov	r25, r24
 304:	0e 94 11 03 	call	0x622	; 0x622 <__floatsisf>
 308:	9b 01       	movw	r18, r22
 30a:	ac 01       	movw	r20, r24
 30c:	c7 01       	movw	r24, r14
 30e:	b6 01       	movw	r22, r12
 310:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__divsf3>
 314:	46 2f       	mov	r20, r22
 316:	57 2f       	mov	r21, r23
 318:	68 2f       	mov	r22, r24
 31a:	79 2f       	mov	r23, r25
 31c:	40 93 95 00 	sts	0x0095, r20
 320:	50 93 96 00 	sts	0x0096, r21
 324:	60 93 97 00 	sts	0x0097, r22
 328:	70 93 98 00 	sts	0x0098, r23
		
		position = position_temp;
 32c:	60 91 95 00 	lds	r22, 0x0095
 330:	70 91 96 00 	lds	r23, 0x0096
 334:	80 91 97 00 	lds	r24, 0x0097
 338:	90 91 98 00 	lds	r25, 0x0098
 33c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__fixunssfsi>
 340:	60 93 99 00 	sts	0x0099, r22
		
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	ff 90       	pop	r15
 34a:	ef 90       	pop	r14
 34c:	df 90       	pop	r13
 34e:	cf 90       	pop	r12
 350:	08 95       	ret

00000352 <main>:
void Catch_position(void);

void main(void)
{

	sei();
 352:	78 94       	sei
	INIT_IO();
 354:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <INIT_IO>
	INIT_USART();
 358:	0e 94 f5 01 	call	0x3ea	; 0x3ea <INIT_USART>
	INIT_TIMER();
 35c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <INIT_TIMER>
	
	
	
	DDRB=0xff;
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	87 bb       	out	0x17, r24	; 23
	DDRD=0x30;
 364:	90 e3       	ldi	r25, 0x30	; 48
 366:	91 bb       	out	0x11, r25	; 17
	
	PORTB=0x06;
 368:	96 e0       	ldi	r25, 0x06	; 6
 36a:	98 bb       	out	0x18, r25	; 24
	PORTC=0xff;
 36c:	85 bb       	out	0x15, r24	; 21
	
	ADMUX=0x60;
 36e:	80 e6       	ldi	r24, 0x60	; 96
 370:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0xcc;
 372:	8c ec       	ldi	r24, 0xCC	; 204
 374:	86 b9       	out	0x06, r24	; 6
 376:	02 c0       	rjmp	.+4      	; 0x37c <main+0x2a>
	{
		
			
			while(calib_flg)
			{
				calibration();
 378:	0e 94 7f 00 	call	0xfe	; 0xfe <calibration>
	ADCSRA=0xcc;
	while(1)
	{
		
			
			while(calib_flg)
 37c:	80 91 70 00 	lds	r24, 0x0070
 380:	81 11       	cpse	r24, r1
 382:	fa cf       	rjmp	.-12     	; 0x378 <main+0x26>
			{
				calibration();
			}
			
			
			sensing();
 384:	0e 94 c8 00 	call	0x190	; 0x190 <sensing>
			Catch_position();
 388:	0e 94 37 01 	call	0x26e	; 0x26e <Catch_position>
			OCR1A=position_R[position];
 38c:	e0 91 99 00 	lds	r30, 0x0099
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	e0 5a       	subi	r30, 0xA0	; 160
 394:	ff 4f       	sbci	r31, 0xFF	; 255
 396:	80 81       	ld	r24, Z
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	9b bd       	out	0x2b, r25	; 43
 39c:	8a bd       	out	0x2a, r24	; 42
			OCR1B=position_L[position];
 39e:	e0 91 99 00 	lds	r30, 0x0099
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	e8 59       	subi	r30, 0x98	; 152
 3a6:	ff 4f       	sbci	r31, 0xFF	; 255
 3a8:	80 81       	ld	r24, Z
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	99 bd       	out	0x29, r25	; 41
 3ae:	88 bd       	out	0x28, r24	; 40
		
	}
 3b0:	e5 cf       	rjmp	.-54     	; 0x37c <main+0x2a>

000003b2 <INIT_IO>:
	else if((switch_1%2)==1)
	PORTC_1_ON;
}*/
void INIT_IO()
{
	OUT_PORTC_0;
 3b2:	a0 9a       	sbi	0x14, 0	; 20
	OUT_PORTC_1;
 3b4:	a1 9a       	sbi	0x14, 1	; 20
	DDRA= 0x00;
 3b6:	1a ba       	out	0x1a, r1	; 26
	MCUCR= 0x0A;
 3b8:	8a e0       	ldi	r24, 0x0A	; 10
 3ba:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
 3bc:	80 ec       	ldi	r24, 0xC0	; 192
 3be:	8b bf       	out	0x3b, r24	; 59
 3c0:	08 95       	ret

000003c2 <INIT_TIMER>:
 */ 
#include "TIMER.h"
void INIT_TIMER(void)
{
	//TCCR1
	Fast_PWM_8bit;
 3c2:	8e b5       	in	r24, 0x2e	; 46
 3c4:	88 60       	ori	r24, 0x08	; 8
 3c6:	8e bd       	out	0x2e, r24	; 46
 3c8:	8f b5       	in	r24, 0x2f	; 47
 3ca:	81 60       	ori	r24, 0x01	; 1
 3cc:	8f bd       	out	0x2f, r24	; 47
	TOP1_Fast_PWM_A;
 3ce:	8f b5       	in	r24, 0x2f	; 47
 3d0:	80 68       	ori	r24, 0x80	; 128
 3d2:	8f bd       	out	0x2f, r24	; 47
	TOP1_Fast_PWM_B;
 3d4:	8f b5       	in	r24, 0x2f	; 47
 3d6:	80 62       	ori	r24, 0x20	; 32
 3d8:	8f bd       	out	0x2f, r24	; 47
	Clk_8;
 3da:	8e b5       	in	r24, 0x2e	; 46
 3dc:	82 60       	ori	r24, 0x02	; 2
 3de:	8e bd       	out	0x2e, r24	; 46
	//TCCR0_Clk_128;
	
	//ICR1H = 0x00;
	//ICR1L = 0xFF;
	
	TIMSK=0x02; 
 3e0:	82 e0       	ldi	r24, 0x02	; 2
 3e2:	89 bf       	out	0x39, r24	; 57
	
	SET_OCR0;
 3e4:	82 e3       	ldi	r24, 0x32	; 50
 3e6:	8c bf       	out	0x3c, r24	; 60
 3e8:	08 95       	ret

000003ea <INIT_USART>:
 */ 
#include "USART.h"
void INIT_USART()
{
	//UCSRA_DoubleSpeed_Mode_ON;
	UCSRA_Parity_Error_OFF;
 3ea:	5a 98       	cbi	0x0b, 2	; 11
	UCSRA_DOR_OFF;
 3ec:	5b 98       	cbi	0x0b, 3	; 11
	UCSRA_Multi_Processor_Comunication_Mode_OFF;
 3ee:	58 98       	cbi	0x0b, 0	; 11
	
	
	UCSRB_TX_Complete_Interrupt_Disable;
 3f0:	56 98       	cbi	0x0a, 6	; 10
	UCSRB_RX_Complete_Interrupt_Disable;
 3f2:	57 98       	cbi	0x0a, 7	; 10
	UCSRB_UDR_empty_Interrupt_Disable;
 3f4:	55 98       	cbi	0x0a, 5	; 10
	UCSRB_Recive_Enable;
 3f6:	54 9a       	sbi	0x0a, 4	; 10
	UCSRB_Transmit_Enable;
 3f8:	53 9a       	sbi	0x0a, 3	; 10
	UCSRB_Recive_9th_Bit_OFF;
 3fa:	51 98       	cbi	0x0a, 1	; 10
	UCSRB_Transmit_9th_Bit_OFF;
 3fc:	50 98       	cbi	0x0a, 0	; 10
	
	
	UCSRC_Asynchronous_Mode;
 3fe:	80 b5       	in	r24, 0x20	; 32
 400:	8f 7b       	andi	r24, 0xBF	; 191
 402:	80 bd       	out	0x20, r24	; 32
	UCSRC_8_bit;
 404:	52 98       	cbi	0x0a, 2	; 10
 406:	80 b5       	in	r24, 0x20	; 32
 408:	84 60       	ori	r24, 0x04	; 4
 40a:	80 bd       	out	0x20, r24	; 32
 40c:	80 b5       	in	r24, 0x20	; 32
 40e:	82 60       	ori	r24, 0x02	; 2
 410:	80 bd       	out	0x20, r24	; 32
	UCSRC_Parity_Mode_Disable;
 412:	80 b5       	in	r24, 0x20	; 32
 414:	8f 7d       	andi	r24, 0xDF	; 223
 416:	80 bd       	out	0x20, r24	; 32
 418:	80 b5       	in	r24, 0x20	; 32
 41a:	8f 7e       	andi	r24, 0xEF	; 239
 41c:	80 bd       	out	0x20, r24	; 32
	//UCSRC_USART_Register_Select_ON;
	UCSRC_1BIT_Stop_Select;
 41e:	80 b5       	in	r24, 0x20	; 32
 420:	87 7f       	andi	r24, 0xF7	; 247
 422:	80 bd       	out	0x20, r24	; 32
	
	
	USART_8MHz_Baud_Rate_9600;
 424:	10 bc       	out	0x20, r1	; 32
 426:	83 e3       	ldi	r24, 0x33	; 51
 428:	89 b9       	out	0x09, r24	; 9
 42a:	08 95       	ret

0000042c <__subsf3>:
 42c:	50 58       	subi	r21, 0x80	; 128

0000042e <__addsf3>:
 42e:	bb 27       	eor	r27, r27
 430:	aa 27       	eor	r26, r26
 432:	0e d0       	rcall	.+28     	; 0x450 <__addsf3x>
 434:	48 c1       	rjmp	.+656    	; 0x6c6 <__fp_round>
 436:	39 d1       	rcall	.+626    	; 0x6aa <__fp_pscA>
 438:	30 f0       	brcs	.+12     	; 0x446 <__addsf3+0x18>
 43a:	3e d1       	rcall	.+636    	; 0x6b8 <__fp_pscB>
 43c:	20 f0       	brcs	.+8      	; 0x446 <__addsf3+0x18>
 43e:	31 f4       	brne	.+12     	; 0x44c <__addsf3+0x1e>
 440:	9f 3f       	cpi	r25, 0xFF	; 255
 442:	11 f4       	brne	.+4      	; 0x448 <__addsf3+0x1a>
 444:	1e f4       	brtc	.+6      	; 0x44c <__addsf3+0x1e>
 446:	2e c1       	rjmp	.+604    	; 0x6a4 <__fp_nan>
 448:	0e f4       	brtc	.+2      	; 0x44c <__addsf3+0x1e>
 44a:	e0 95       	com	r30
 44c:	e7 fb       	bst	r30, 7
 44e:	24 c1       	rjmp	.+584    	; 0x698 <__fp_inf>

00000450 <__addsf3x>:
 450:	e9 2f       	mov	r30, r25
 452:	4a d1       	rcall	.+660    	; 0x6e8 <__fp_split3>
 454:	80 f3       	brcs	.-32     	; 0x436 <__addsf3+0x8>
 456:	ba 17       	cp	r27, r26
 458:	62 07       	cpc	r22, r18
 45a:	73 07       	cpc	r23, r19
 45c:	84 07       	cpc	r24, r20
 45e:	95 07       	cpc	r25, r21
 460:	18 f0       	brcs	.+6      	; 0x468 <__stack+0x9>
 462:	71 f4       	brne	.+28     	; 0x480 <__stack+0x21>
 464:	9e f5       	brtc	.+102    	; 0x4cc <__stack+0x6d>
 466:	62 c1       	rjmp	.+708    	; 0x72c <__fp_zero>
 468:	0e f4       	brtc	.+2      	; 0x46c <__stack+0xd>
 46a:	e0 95       	com	r30
 46c:	0b 2e       	mov	r0, r27
 46e:	ba 2f       	mov	r27, r26
 470:	a0 2d       	mov	r26, r0
 472:	0b 01       	movw	r0, r22
 474:	b9 01       	movw	r22, r18
 476:	90 01       	movw	r18, r0
 478:	0c 01       	movw	r0, r24
 47a:	ca 01       	movw	r24, r20
 47c:	a0 01       	movw	r20, r0
 47e:	11 24       	eor	r1, r1
 480:	ff 27       	eor	r31, r31
 482:	59 1b       	sub	r21, r25
 484:	99 f0       	breq	.+38     	; 0x4ac <__stack+0x4d>
 486:	59 3f       	cpi	r21, 0xF9	; 249
 488:	50 f4       	brcc	.+20     	; 0x49e <__stack+0x3f>
 48a:	50 3e       	cpi	r21, 0xE0	; 224
 48c:	68 f1       	brcs	.+90     	; 0x4e8 <__stack+0x89>
 48e:	1a 16       	cp	r1, r26
 490:	f0 40       	sbci	r31, 0x00	; 0
 492:	a2 2f       	mov	r26, r18
 494:	23 2f       	mov	r18, r19
 496:	34 2f       	mov	r19, r20
 498:	44 27       	eor	r20, r20
 49a:	58 5f       	subi	r21, 0xF8	; 248
 49c:	f3 cf       	rjmp	.-26     	; 0x484 <__stack+0x25>
 49e:	46 95       	lsr	r20
 4a0:	37 95       	ror	r19
 4a2:	27 95       	ror	r18
 4a4:	a7 95       	ror	r26
 4a6:	f0 40       	sbci	r31, 0x00	; 0
 4a8:	53 95       	inc	r21
 4aa:	c9 f7       	brne	.-14     	; 0x49e <__stack+0x3f>
 4ac:	7e f4       	brtc	.+30     	; 0x4cc <__stack+0x6d>
 4ae:	1f 16       	cp	r1, r31
 4b0:	ba 0b       	sbc	r27, r26
 4b2:	62 0b       	sbc	r22, r18
 4b4:	73 0b       	sbc	r23, r19
 4b6:	84 0b       	sbc	r24, r20
 4b8:	ba f0       	brmi	.+46     	; 0x4e8 <__stack+0x89>
 4ba:	91 50       	subi	r25, 0x01	; 1
 4bc:	a1 f0       	breq	.+40     	; 0x4e6 <__stack+0x87>
 4be:	ff 0f       	add	r31, r31
 4c0:	bb 1f       	adc	r27, r27
 4c2:	66 1f       	adc	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	88 1f       	adc	r24, r24
 4c8:	c2 f7       	brpl	.-16     	; 0x4ba <__stack+0x5b>
 4ca:	0e c0       	rjmp	.+28     	; 0x4e8 <__stack+0x89>
 4cc:	ba 0f       	add	r27, r26
 4ce:	62 1f       	adc	r22, r18
 4d0:	73 1f       	adc	r23, r19
 4d2:	84 1f       	adc	r24, r20
 4d4:	48 f4       	brcc	.+18     	; 0x4e8 <__stack+0x89>
 4d6:	87 95       	ror	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b7 95       	ror	r27
 4de:	f7 95       	ror	r31
 4e0:	9e 3f       	cpi	r25, 0xFE	; 254
 4e2:	08 f0       	brcs	.+2      	; 0x4e6 <__stack+0x87>
 4e4:	b3 cf       	rjmp	.-154    	; 0x44c <__addsf3+0x1e>
 4e6:	93 95       	inc	r25
 4e8:	88 0f       	add	r24, r24
 4ea:	08 f0       	brcs	.+2      	; 0x4ee <__stack+0x8f>
 4ec:	99 27       	eor	r25, r25
 4ee:	ee 0f       	add	r30, r30
 4f0:	97 95       	ror	r25
 4f2:	87 95       	ror	r24
 4f4:	08 95       	ret

000004f6 <__divsf3>:
 4f6:	0c d0       	rcall	.+24     	; 0x510 <__divsf3x>
 4f8:	e6 c0       	rjmp	.+460    	; 0x6c6 <__fp_round>
 4fa:	de d0       	rcall	.+444    	; 0x6b8 <__fp_pscB>
 4fc:	40 f0       	brcs	.+16     	; 0x50e <__divsf3+0x18>
 4fe:	d5 d0       	rcall	.+426    	; 0x6aa <__fp_pscA>
 500:	30 f0       	brcs	.+12     	; 0x50e <__divsf3+0x18>
 502:	21 f4       	brne	.+8      	; 0x50c <__divsf3+0x16>
 504:	5f 3f       	cpi	r21, 0xFF	; 255
 506:	19 f0       	breq	.+6      	; 0x50e <__divsf3+0x18>
 508:	c7 c0       	rjmp	.+398    	; 0x698 <__fp_inf>
 50a:	51 11       	cpse	r21, r1
 50c:	10 c1       	rjmp	.+544    	; 0x72e <__fp_szero>
 50e:	ca c0       	rjmp	.+404    	; 0x6a4 <__fp_nan>

00000510 <__divsf3x>:
 510:	eb d0       	rcall	.+470    	; 0x6e8 <__fp_split3>
 512:	98 f3       	brcs	.-26     	; 0x4fa <__divsf3+0x4>

00000514 <__divsf3_pse>:
 514:	99 23       	and	r25, r25
 516:	c9 f3       	breq	.-14     	; 0x50a <__divsf3+0x14>
 518:	55 23       	and	r21, r21
 51a:	b1 f3       	breq	.-20     	; 0x508 <__divsf3+0x12>
 51c:	95 1b       	sub	r25, r21
 51e:	55 0b       	sbc	r21, r21
 520:	bb 27       	eor	r27, r27
 522:	aa 27       	eor	r26, r26
 524:	62 17       	cp	r22, r18
 526:	73 07       	cpc	r23, r19
 528:	84 07       	cpc	r24, r20
 52a:	38 f0       	brcs	.+14     	; 0x53a <__divsf3_pse+0x26>
 52c:	9f 5f       	subi	r25, 0xFF	; 255
 52e:	5f 4f       	sbci	r21, 0xFF	; 255
 530:	22 0f       	add	r18, r18
 532:	33 1f       	adc	r19, r19
 534:	44 1f       	adc	r20, r20
 536:	aa 1f       	adc	r26, r26
 538:	a9 f3       	breq	.-22     	; 0x524 <__divsf3_pse+0x10>
 53a:	33 d0       	rcall	.+102    	; 0x5a2 <__divsf3_pse+0x8e>
 53c:	0e 2e       	mov	r0, r30
 53e:	3a f0       	brmi	.+14     	; 0x54e <__divsf3_pse+0x3a>
 540:	e0 e8       	ldi	r30, 0x80	; 128
 542:	30 d0       	rcall	.+96     	; 0x5a4 <__divsf3_pse+0x90>
 544:	91 50       	subi	r25, 0x01	; 1
 546:	50 40       	sbci	r21, 0x00	; 0
 548:	e6 95       	lsr	r30
 54a:	00 1c       	adc	r0, r0
 54c:	ca f7       	brpl	.-14     	; 0x540 <__divsf3_pse+0x2c>
 54e:	29 d0       	rcall	.+82     	; 0x5a2 <__divsf3_pse+0x8e>
 550:	fe 2f       	mov	r31, r30
 552:	27 d0       	rcall	.+78     	; 0x5a2 <__divsf3_pse+0x8e>
 554:	66 0f       	add	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	88 1f       	adc	r24, r24
 55a:	bb 1f       	adc	r27, r27
 55c:	26 17       	cp	r18, r22
 55e:	37 07       	cpc	r19, r23
 560:	48 07       	cpc	r20, r24
 562:	ab 07       	cpc	r26, r27
 564:	b0 e8       	ldi	r27, 0x80	; 128
 566:	09 f0       	breq	.+2      	; 0x56a <__divsf3_pse+0x56>
 568:	bb 0b       	sbc	r27, r27
 56a:	80 2d       	mov	r24, r0
 56c:	bf 01       	movw	r22, r30
 56e:	ff 27       	eor	r31, r31
 570:	93 58       	subi	r25, 0x83	; 131
 572:	5f 4f       	sbci	r21, 0xFF	; 255
 574:	2a f0       	brmi	.+10     	; 0x580 <__divsf3_pse+0x6c>
 576:	9e 3f       	cpi	r25, 0xFE	; 254
 578:	51 05       	cpc	r21, r1
 57a:	68 f0       	brcs	.+26     	; 0x596 <__divsf3_pse+0x82>
 57c:	8d c0       	rjmp	.+282    	; 0x698 <__fp_inf>
 57e:	d7 c0       	rjmp	.+430    	; 0x72e <__fp_szero>
 580:	5f 3f       	cpi	r21, 0xFF	; 255
 582:	ec f3       	brlt	.-6      	; 0x57e <__divsf3_pse+0x6a>
 584:	98 3e       	cpi	r25, 0xE8	; 232
 586:	dc f3       	brlt	.-10     	; 0x57e <__divsf3_pse+0x6a>
 588:	86 95       	lsr	r24
 58a:	77 95       	ror	r23
 58c:	67 95       	ror	r22
 58e:	b7 95       	ror	r27
 590:	f7 95       	ror	r31
 592:	9f 5f       	subi	r25, 0xFF	; 255
 594:	c9 f7       	brne	.-14     	; 0x588 <__divsf3_pse+0x74>
 596:	88 0f       	add	r24, r24
 598:	91 1d       	adc	r25, r1
 59a:	96 95       	lsr	r25
 59c:	87 95       	ror	r24
 59e:	97 f9       	bld	r25, 7
 5a0:	08 95       	ret
 5a2:	e1 e0       	ldi	r30, 0x01	; 1
 5a4:	66 0f       	add	r22, r22
 5a6:	77 1f       	adc	r23, r23
 5a8:	88 1f       	adc	r24, r24
 5aa:	bb 1f       	adc	r27, r27
 5ac:	62 17       	cp	r22, r18
 5ae:	73 07       	cpc	r23, r19
 5b0:	84 07       	cpc	r24, r20
 5b2:	ba 07       	cpc	r27, r26
 5b4:	20 f0       	brcs	.+8      	; 0x5be <__divsf3_pse+0xaa>
 5b6:	62 1b       	sub	r22, r18
 5b8:	73 0b       	sbc	r23, r19
 5ba:	84 0b       	sbc	r24, r20
 5bc:	ba 0b       	sbc	r27, r26
 5be:	ee 1f       	adc	r30, r30
 5c0:	88 f7       	brcc	.-30     	; 0x5a4 <__divsf3_pse+0x90>
 5c2:	e0 95       	com	r30
 5c4:	08 95       	ret

000005c6 <__fixunssfsi>:
 5c6:	98 d0       	rcall	.+304    	; 0x6f8 <__fp_splitA>
 5c8:	88 f0       	brcs	.+34     	; 0x5ec <__fixunssfsi+0x26>
 5ca:	9f 57       	subi	r25, 0x7F	; 127
 5cc:	90 f0       	brcs	.+36     	; 0x5f2 <__fixunssfsi+0x2c>
 5ce:	b9 2f       	mov	r27, r25
 5d0:	99 27       	eor	r25, r25
 5d2:	b7 51       	subi	r27, 0x17	; 23
 5d4:	a0 f0       	brcs	.+40     	; 0x5fe <__fixunssfsi+0x38>
 5d6:	d1 f0       	breq	.+52     	; 0x60c <__fixunssfsi+0x46>
 5d8:	66 0f       	add	r22, r22
 5da:	77 1f       	adc	r23, r23
 5dc:	88 1f       	adc	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	1a f0       	brmi	.+6      	; 0x5e8 <__fixunssfsi+0x22>
 5e2:	ba 95       	dec	r27
 5e4:	c9 f7       	brne	.-14     	; 0x5d8 <__fixunssfsi+0x12>
 5e6:	12 c0       	rjmp	.+36     	; 0x60c <__fixunssfsi+0x46>
 5e8:	b1 30       	cpi	r27, 0x01	; 1
 5ea:	81 f0       	breq	.+32     	; 0x60c <__fixunssfsi+0x46>
 5ec:	9f d0       	rcall	.+318    	; 0x72c <__fp_zero>
 5ee:	b1 e0       	ldi	r27, 0x01	; 1
 5f0:	08 95       	ret
 5f2:	9c c0       	rjmp	.+312    	; 0x72c <__fp_zero>
 5f4:	67 2f       	mov	r22, r23
 5f6:	78 2f       	mov	r23, r24
 5f8:	88 27       	eor	r24, r24
 5fa:	b8 5f       	subi	r27, 0xF8	; 248
 5fc:	39 f0       	breq	.+14     	; 0x60c <__fixunssfsi+0x46>
 5fe:	b9 3f       	cpi	r27, 0xF9	; 249
 600:	cc f3       	brlt	.-14     	; 0x5f4 <__fixunssfsi+0x2e>
 602:	86 95       	lsr	r24
 604:	77 95       	ror	r23
 606:	67 95       	ror	r22
 608:	b3 95       	inc	r27
 60a:	d9 f7       	brne	.-10     	; 0x602 <__fixunssfsi+0x3c>
 60c:	3e f4       	brtc	.+14     	; 0x61c <__fixunssfsi+0x56>
 60e:	90 95       	com	r25
 610:	80 95       	com	r24
 612:	70 95       	com	r23
 614:	61 95       	neg	r22
 616:	7f 4f       	sbci	r23, 0xFF	; 255
 618:	8f 4f       	sbci	r24, 0xFF	; 255
 61a:	9f 4f       	sbci	r25, 0xFF	; 255
 61c:	08 95       	ret

0000061e <__floatunsisf>:
 61e:	e8 94       	clt
 620:	09 c0       	rjmp	.+18     	; 0x634 <__floatsisf+0x12>

00000622 <__floatsisf>:
 622:	97 fb       	bst	r25, 7
 624:	3e f4       	brtc	.+14     	; 0x634 <__floatsisf+0x12>
 626:	90 95       	com	r25
 628:	80 95       	com	r24
 62a:	70 95       	com	r23
 62c:	61 95       	neg	r22
 62e:	7f 4f       	sbci	r23, 0xFF	; 255
 630:	8f 4f       	sbci	r24, 0xFF	; 255
 632:	9f 4f       	sbci	r25, 0xFF	; 255
 634:	99 23       	and	r25, r25
 636:	a9 f0       	breq	.+42     	; 0x662 <__floatsisf+0x40>
 638:	f9 2f       	mov	r31, r25
 63a:	96 e9       	ldi	r25, 0x96	; 150
 63c:	bb 27       	eor	r27, r27
 63e:	93 95       	inc	r25
 640:	f6 95       	lsr	r31
 642:	87 95       	ror	r24
 644:	77 95       	ror	r23
 646:	67 95       	ror	r22
 648:	b7 95       	ror	r27
 64a:	f1 11       	cpse	r31, r1
 64c:	f8 cf       	rjmp	.-16     	; 0x63e <__floatsisf+0x1c>
 64e:	fa f4       	brpl	.+62     	; 0x68e <__floatsisf+0x6c>
 650:	bb 0f       	add	r27, r27
 652:	11 f4       	brne	.+4      	; 0x658 <__floatsisf+0x36>
 654:	60 ff       	sbrs	r22, 0
 656:	1b c0       	rjmp	.+54     	; 0x68e <__floatsisf+0x6c>
 658:	6f 5f       	subi	r22, 0xFF	; 255
 65a:	7f 4f       	sbci	r23, 0xFF	; 255
 65c:	8f 4f       	sbci	r24, 0xFF	; 255
 65e:	9f 4f       	sbci	r25, 0xFF	; 255
 660:	16 c0       	rjmp	.+44     	; 0x68e <__floatsisf+0x6c>
 662:	88 23       	and	r24, r24
 664:	11 f0       	breq	.+4      	; 0x66a <__floatsisf+0x48>
 666:	96 e9       	ldi	r25, 0x96	; 150
 668:	11 c0       	rjmp	.+34     	; 0x68c <__floatsisf+0x6a>
 66a:	77 23       	and	r23, r23
 66c:	21 f0       	breq	.+8      	; 0x676 <__floatsisf+0x54>
 66e:	9e e8       	ldi	r25, 0x8E	; 142
 670:	87 2f       	mov	r24, r23
 672:	76 2f       	mov	r23, r22
 674:	05 c0       	rjmp	.+10     	; 0x680 <__floatsisf+0x5e>
 676:	66 23       	and	r22, r22
 678:	71 f0       	breq	.+28     	; 0x696 <__floatsisf+0x74>
 67a:	96 e8       	ldi	r25, 0x86	; 134
 67c:	86 2f       	mov	r24, r22
 67e:	70 e0       	ldi	r23, 0x00	; 0
 680:	60 e0       	ldi	r22, 0x00	; 0
 682:	2a f0       	brmi	.+10     	; 0x68e <__floatsisf+0x6c>
 684:	9a 95       	dec	r25
 686:	66 0f       	add	r22, r22
 688:	77 1f       	adc	r23, r23
 68a:	88 1f       	adc	r24, r24
 68c:	da f7       	brpl	.-10     	; 0x684 <__floatsisf+0x62>
 68e:	88 0f       	add	r24, r24
 690:	96 95       	lsr	r25
 692:	87 95       	ror	r24
 694:	97 f9       	bld	r25, 7
 696:	08 95       	ret

00000698 <__fp_inf>:
 698:	97 f9       	bld	r25, 7
 69a:	9f 67       	ori	r25, 0x7F	; 127
 69c:	80 e8       	ldi	r24, 0x80	; 128
 69e:	70 e0       	ldi	r23, 0x00	; 0
 6a0:	60 e0       	ldi	r22, 0x00	; 0
 6a2:	08 95       	ret

000006a4 <__fp_nan>:
 6a4:	9f ef       	ldi	r25, 0xFF	; 255
 6a6:	80 ec       	ldi	r24, 0xC0	; 192
 6a8:	08 95       	ret

000006aa <__fp_pscA>:
 6aa:	00 24       	eor	r0, r0
 6ac:	0a 94       	dec	r0
 6ae:	16 16       	cp	r1, r22
 6b0:	17 06       	cpc	r1, r23
 6b2:	18 06       	cpc	r1, r24
 6b4:	09 06       	cpc	r0, r25
 6b6:	08 95       	ret

000006b8 <__fp_pscB>:
 6b8:	00 24       	eor	r0, r0
 6ba:	0a 94       	dec	r0
 6bc:	12 16       	cp	r1, r18
 6be:	13 06       	cpc	r1, r19
 6c0:	14 06       	cpc	r1, r20
 6c2:	05 06       	cpc	r0, r21
 6c4:	08 95       	ret

000006c6 <__fp_round>:
 6c6:	09 2e       	mov	r0, r25
 6c8:	03 94       	inc	r0
 6ca:	00 0c       	add	r0, r0
 6cc:	11 f4       	brne	.+4      	; 0x6d2 <__fp_round+0xc>
 6ce:	88 23       	and	r24, r24
 6d0:	52 f0       	brmi	.+20     	; 0x6e6 <__fp_round+0x20>
 6d2:	bb 0f       	add	r27, r27
 6d4:	40 f4       	brcc	.+16     	; 0x6e6 <__fp_round+0x20>
 6d6:	bf 2b       	or	r27, r31
 6d8:	11 f4       	brne	.+4      	; 0x6de <__fp_round+0x18>
 6da:	60 ff       	sbrs	r22, 0
 6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <__fp_round+0x20>
 6de:	6f 5f       	subi	r22, 0xFF	; 255
 6e0:	7f 4f       	sbci	r23, 0xFF	; 255
 6e2:	8f 4f       	sbci	r24, 0xFF	; 255
 6e4:	9f 4f       	sbci	r25, 0xFF	; 255
 6e6:	08 95       	ret

000006e8 <__fp_split3>:
 6e8:	57 fd       	sbrc	r21, 7
 6ea:	90 58       	subi	r25, 0x80	; 128
 6ec:	44 0f       	add	r20, r20
 6ee:	55 1f       	adc	r21, r21
 6f0:	59 f0       	breq	.+22     	; 0x708 <__fp_splitA+0x10>
 6f2:	5f 3f       	cpi	r21, 0xFF	; 255
 6f4:	71 f0       	breq	.+28     	; 0x712 <__fp_splitA+0x1a>
 6f6:	47 95       	ror	r20

000006f8 <__fp_splitA>:
 6f8:	88 0f       	add	r24, r24
 6fa:	97 fb       	bst	r25, 7
 6fc:	99 1f       	adc	r25, r25
 6fe:	61 f0       	breq	.+24     	; 0x718 <__fp_splitA+0x20>
 700:	9f 3f       	cpi	r25, 0xFF	; 255
 702:	79 f0       	breq	.+30     	; 0x722 <__fp_splitA+0x2a>
 704:	87 95       	ror	r24
 706:	08 95       	ret
 708:	12 16       	cp	r1, r18
 70a:	13 06       	cpc	r1, r19
 70c:	14 06       	cpc	r1, r20
 70e:	55 1f       	adc	r21, r21
 710:	f2 cf       	rjmp	.-28     	; 0x6f6 <__fp_split3+0xe>
 712:	46 95       	lsr	r20
 714:	f1 df       	rcall	.-30     	; 0x6f8 <__fp_splitA>
 716:	08 c0       	rjmp	.+16     	; 0x728 <__fp_splitA+0x30>
 718:	16 16       	cp	r1, r22
 71a:	17 06       	cpc	r1, r23
 71c:	18 06       	cpc	r1, r24
 71e:	99 1f       	adc	r25, r25
 720:	f1 cf       	rjmp	.-30     	; 0x704 <__fp_splitA+0xc>
 722:	86 95       	lsr	r24
 724:	71 05       	cpc	r23, r1
 726:	61 05       	cpc	r22, r1
 728:	08 94       	sec
 72a:	08 95       	ret

0000072c <__fp_zero>:
 72c:	e8 94       	clt

0000072e <__fp_szero>:
 72e:	bb 27       	eor	r27, r27
 730:	66 27       	eor	r22, r22
 732:	77 27       	eor	r23, r23
 734:	cb 01       	movw	r24, r22
 736:	97 f9       	bld	r25, 7
 738:	08 95       	ret

0000073a <__divmodhi4>:
 73a:	97 fb       	bst	r25, 7
 73c:	07 2e       	mov	r0, r23
 73e:	16 f4       	brtc	.+4      	; 0x744 <__divmodhi4+0xa>
 740:	00 94       	com	r0
 742:	07 d0       	rcall	.+14     	; 0x752 <__divmodhi4_neg1>
 744:	77 fd       	sbrc	r23, 7
 746:	09 d0       	rcall	.+18     	; 0x75a <__divmodhi4_neg2>
 748:	0e 94 b1 03 	call	0x762	; 0x762 <__udivmodhi4>
 74c:	07 fc       	sbrc	r0, 7
 74e:	05 d0       	rcall	.+10     	; 0x75a <__divmodhi4_neg2>
 750:	3e f4       	brtc	.+14     	; 0x760 <__divmodhi4_exit>

00000752 <__divmodhi4_neg1>:
 752:	90 95       	com	r25
 754:	81 95       	neg	r24
 756:	9f 4f       	sbci	r25, 0xFF	; 255
 758:	08 95       	ret

0000075a <__divmodhi4_neg2>:
 75a:	70 95       	com	r23
 75c:	61 95       	neg	r22
 75e:	7f 4f       	sbci	r23, 0xFF	; 255

00000760 <__divmodhi4_exit>:
 760:	08 95       	ret

00000762 <__udivmodhi4>:
 762:	aa 1b       	sub	r26, r26
 764:	bb 1b       	sub	r27, r27
 766:	51 e1       	ldi	r21, 0x11	; 17
 768:	07 c0       	rjmp	.+14     	; 0x778 <__udivmodhi4_ep>

0000076a <__udivmodhi4_loop>:
 76a:	aa 1f       	adc	r26, r26
 76c:	bb 1f       	adc	r27, r27
 76e:	a6 17       	cp	r26, r22
 770:	b7 07       	cpc	r27, r23
 772:	10 f0       	brcs	.+4      	; 0x778 <__udivmodhi4_ep>
 774:	a6 1b       	sub	r26, r22
 776:	b7 0b       	sbc	r27, r23

00000778 <__udivmodhi4_ep>:
 778:	88 1f       	adc	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	5a 95       	dec	r21
 77e:	a9 f7       	brne	.-22     	; 0x76a <__udivmodhi4_loop>
 780:	80 95       	com	r24
 782:	90 95       	com	r25
 784:	bc 01       	movw	r22, r24
 786:	cd 01       	movw	r24, r26
 788:	08 95       	ret

0000078a <_exit>:
 78a:	f8 94       	cli

0000078c <__stop_program>:
 78c:	ff cf       	rjmp	.-2      	; 0x78c <__stop_program>
