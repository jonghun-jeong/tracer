
Avr_16_Tracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000002f8  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  0000038c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000aef  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000b0  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000038d  00000000  00000000  00000bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001bd  00000000  00000000  00000f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000405  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c8  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000013d  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000261  00000000  00000000  00001825  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000070  00000000  00000000  00001a86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_1>
   8:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
volatile int usart_time = 0;

void main(void)
{

	sei();
  92:	78 94       	sei
	INIT_IO();
  94:	0e 94 2c 01 	call	0x258	; 0x258 <INIT_IO>
	INIT_USART();
  98:	0e 94 51 01 	call	0x2a2	; 0x2a2 <INIT_USART>
	INIT_TIMER();
  9c:	0e 94 34 01 	call	0x268	; 0x268 <INIT_TIMER>
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0xe>

000000a2 <__vector_19>:
		;
	}

}
SIGNAL(TIMER0_COMP_vect)
{
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	2f 93       	push	r18
  ae:	3f 93       	push	r19
  b0:	4f 93       	push	r20
  b2:	5f 93       	push	r21
  b4:	6f 93       	push	r22
  b6:	7f 93       	push	r23
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	af 93       	push	r26
  be:	bf 93       	push	r27
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
	time++;
  c4:	80 91 62 00 	lds	r24, 0x0062
  c8:	90 91 63 00 	lds	r25, 0x0063
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	90 93 63 00 	sts	0x0063, r25
  d2:	80 93 62 00 	sts	0x0062, r24
	usart_time++;
  d6:	80 91 60 00 	lds	r24, 0x0060
  da:	90 91 61 00 	lds	r25, 0x0061
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 61 00 	sts	0x0061, r25
  e4:	80 93 60 00 	sts	0x0060, r24
	if(time<8)
  e8:	80 91 62 00 	lds	r24, 0x0062
  ec:	90 91 63 00 	lds	r25, 0x0063
  f0:	08 97       	sbiw	r24, 0x08	; 8
  f2:	14 f4       	brge	.+4      	; 0xf8 <__vector_19+0x56>
	{
		PORTC=0x00;
  f4:	15 ba       	out	0x15, r1	; 21
  f6:	0d c0       	rjmp	.+26     	; 0x112 <__vector_19+0x70>
	}
	else if(time==16)
  f8:	80 91 62 00 	lds	r24, 0x0062
  fc:	90 91 63 00 	lds	r25, 0x0063
 100:	40 97       	sbiw	r24, 0x10	; 16
 102:	29 f4       	brne	.+10     	; 0x10e <__vector_19+0x6c>
	{
		time=0;
 104:	10 92 63 00 	sts	0x0063, r1
 108:	10 92 62 00 	sts	0x0062, r1
 10c:	02 c0       	rjmp	.+4      	; 0x112 <__vector_19+0x70>
	}
	else
	{
		PORTC=0xff;
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	85 bb       	out	0x15, r24	; 21
	}
	
	if(usart_time > 10)
 112:	80 91 60 00 	lds	r24, 0x0060
 116:	90 91 61 00 	lds	r25, 0x0061
 11a:	0b 97       	sbiw	r24, 0x0b	; 11
 11c:	34 f0       	brlt	.+12     	; 0x12a <__vector_19+0x88>
	{
		usart_time = 0;
 11e:	10 92 61 00 	sts	0x0061, r1
 122:	10 92 60 00 	sts	0x0060, r1
		USART_TEST();
 126:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_TEST>
	}
}
 12a:	ff 91       	pop	r31
 12c:	ef 91       	pop	r30
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	7f 91       	pop	r23
 138:	6f 91       	pop	r22
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_1>:
SIGNAL(INT0_vect)
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	led0();
 16e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <led0>
	OCR1B=0;
 172:	19 bc       	out	0x29, r1	; 41
 174:	18 bc       	out	0x28, r1	; 40
	OCR1A=60; 
 176:	8c e3       	ldi	r24, 0x3C	; 60
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	9b bd       	out	0x2b, r25	; 43
 17c:	8a bd       	out	0x2a, r24	; 42
	
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	7f 91       	pop	r23
 18c:	6f 91       	pop	r22
 18e:	5f 91       	pop	r21
 190:	4f 91       	pop	r20
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__vector_2>:
SIGNAL(INT1_vect)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	2f 93       	push	r18
 1ac:	3f 93       	push	r19
 1ae:	4f 93       	push	r20
 1b0:	5f 93       	push	r21
 1b2:	6f 93       	push	r22
 1b4:	7f 93       	push	r23
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
	led1();
 1c2:	0e 94 13 01 	call	0x226	; 0x226 <led1>
	OCR1B=60;
 1c6:	8c e3       	ldi	r24, 0x3C	; 60
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	99 bd       	out	0x29, r25	; 41
 1cc:	88 bd       	out	0x28, r24	; 40
	OCR1A=0;
 1ce:	1b bc       	out	0x2b, r1	; 43
 1d0:	1a bc       	out	0x2a, r1	; 42
}
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	7f 91       	pop	r23
 1e0:	6f 91       	pop	r22
 1e2:	5f 91       	pop	r21
 1e4:	4f 91       	pop	r20
 1e6:	3f 91       	pop	r19
 1e8:	2f 91       	pop	r18
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <led0>:
#include "IO_PORT.h"

void led0()
{
	static int switch_0=0;
	switch_0++;
 1f4:	80 91 64 00 	lds	r24, 0x0064
 1f8:	90 91 65 00 	lds	r25, 0x0065
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	90 93 65 00 	sts	0x0065, r25
 202:	80 93 64 00 	sts	0x0064, r24
	if((switch_0%2)==0)
 206:	80 fd       	sbrc	r24, 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <led0+0x1a>
	PORTC_0_OFF;
 20a:	a8 98       	cbi	0x15, 0	; 21
 20c:	08 95       	ret
	else if((switch_0%2)==1)
 20e:	81 70       	andi	r24, 0x01	; 1
 210:	90 78       	andi	r25, 0x80	; 128
 212:	99 23       	and	r25, r25
 214:	24 f4       	brge	.+8      	; 0x21e <led0+0x2a>
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	8e 6f       	ori	r24, 0xFE	; 254
 21a:	9f 6f       	ori	r25, 0xFF	; 255
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	09 f4       	brne	.+2      	; 0x224 <led0+0x30>
	PORTC_0_ON;
 222:	a8 9a       	sbi	0x15, 0	; 21
 224:	08 95       	ret

00000226 <led1>:
}
void led1()
{
	static int switch_1=0;
	switch_1++;
 226:	80 91 66 00 	lds	r24, 0x0066
 22a:	90 91 67 00 	lds	r25, 0x0067
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	90 93 67 00 	sts	0x0067, r25
 234:	80 93 66 00 	sts	0x0066, r24
	if((switch_1%2)==0)
 238:	80 fd       	sbrc	r24, 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <led1+0x1a>
	PORTC_1_OFF;
 23c:	a9 98       	cbi	0x15, 1	; 21
 23e:	08 95       	ret
	else if((switch_1%2)==1)
 240:	81 70       	andi	r24, 0x01	; 1
 242:	90 78       	andi	r25, 0x80	; 128
 244:	99 23       	and	r25, r25
 246:	24 f4       	brge	.+8      	; 0x250 <led1+0x2a>
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	8e 6f       	ori	r24, 0xFE	; 254
 24c:	9f 6f       	ori	r25, 0xFF	; 255
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	09 f4       	brne	.+2      	; 0x256 <led1+0x30>
	PORTC_1_ON;
 254:	a9 9a       	sbi	0x15, 1	; 21
 256:	08 95       	ret

00000258 <INIT_IO>:
}
void INIT_IO()
{
	OUT_PORTC_0;
 258:	a0 9a       	sbi	0x14, 0	; 20
	OUT_PORTC_1;
 25a:	a1 9a       	sbi	0x14, 1	; 20
	DDRA= 0x00;
 25c:	1a ba       	out	0x1a, r1	; 26
	MCUCR= 0x0A;
 25e:	8a e0       	ldi	r24, 0x0A	; 10
 260:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
 262:	80 ec       	ldi	r24, 0xC0	; 192
 264:	8b bf       	out	0x3b, r24	; 59
 266:	08 95       	ret

00000268 <INIT_TIMER>:
 */ 
#include "TIMER.h"
void INIT_TIMER(void)
{
	//TCCR0
	TCCR0_Phase_Correct_PWM	;
 268:	83 b7       	in	r24, 0x33	; 51
 26a:	80 64       	ori	r24, 0x40	; 64
 26c:	83 bf       	out	0x33, r24	; 51
	TCCR0_Clk_128;
 26e:	83 b7       	in	r24, 0x33	; 51
 270:	84 60       	ori	r24, 0x04	; 4
 272:	83 bf       	out	0x33, r24	; 51
 274:	83 b7       	in	r24, 0x33	; 51
 276:	81 60       	ori	r24, 0x01	; 1
 278:	83 bf       	out	0x33, r24	; 51
	
	
	//TCCR1
	Fast_PWM_8bit;
 27a:	8e b5       	in	r24, 0x2e	; 46
 27c:	88 60       	ori	r24, 0x08	; 8
 27e:	8e bd       	out	0x2e, r24	; 46
 280:	8f b5       	in	r24, 0x2f	; 47
 282:	81 60       	ori	r24, 0x01	; 1
 284:	8f bd       	out	0x2f, r24	; 47
	TOP1_Fast_PWM_A;
 286:	8f b5       	in	r24, 0x2f	; 47
 288:	80 68       	ori	r24, 0x80	; 128
 28a:	8f bd       	out	0x2f, r24	; 47
	TOP1_Fast_PWM_B;
 28c:	8f b5       	in	r24, 0x2f	; 47
 28e:	80 62       	ori	r24, 0x20	; 32
 290:	8f bd       	out	0x2f, r24	; 47
	Clk_8;
 292:	8e b5       	in	r24, 0x2e	; 46
 294:	82 60       	ori	r24, 0x02	; 2
 296:	8e bd       	out	0x2e, r24	; 46
	
	TIMSK=0x02; 
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	89 bf       	out	0x39, r24	; 57
	
	
	SET_OCR0;
 29c:	82 e3       	ldi	r24, 0x32	; 50
 29e:	8c bf       	out	0x3c, r24	; 60
 2a0:	08 95       	ret

000002a2 <INIT_USART>:
 */ 
#include "USART.h"
void INIT_USART()
{
	//UCSRA_DoubleSpeed_Mode_ON;
	UCSRA_Parity_Error_OFF;
 2a2:	5a 98       	cbi	0x0b, 2	; 11
	UCSRA_DOR_OFF;
 2a4:	5b 98       	cbi	0x0b, 3	; 11
	UCSRA_Multi_Processor_Comunication_Mode_OFF;
 2a6:	58 98       	cbi	0x0b, 0	; 11
	
	
	UCSRB_TX_Complete_Interrupt_Disable;
 2a8:	56 98       	cbi	0x0a, 6	; 10
	UCSRB_RX_Complete_Interrupt_Disable;
 2aa:	57 98       	cbi	0x0a, 7	; 10
	UCSRB_UDR_empty_Interrupt_Disable;
 2ac:	55 98       	cbi	0x0a, 5	; 10
	UCSRB_Recive_Enable;
 2ae:	54 9a       	sbi	0x0a, 4	; 10
	UCSRB_Transmit_Enable;
 2b0:	53 9a       	sbi	0x0a, 3	; 10
	UCSRB_Recive_9th_Bit_OFF;
 2b2:	51 98       	cbi	0x0a, 1	; 10
	UCSRB_Transmit_9th_Bit_OFF;
 2b4:	50 98       	cbi	0x0a, 0	; 10
	
	
	UCSRC_Asynchronous_Mode;
 2b6:	80 b5       	in	r24, 0x20	; 32
 2b8:	8f 7b       	andi	r24, 0xBF	; 191
 2ba:	80 bd       	out	0x20, r24	; 32
	UCSRC_8_bit;
 2bc:	52 98       	cbi	0x0a, 2	; 10
 2be:	80 b5       	in	r24, 0x20	; 32
 2c0:	84 60       	ori	r24, 0x04	; 4
 2c2:	80 bd       	out	0x20, r24	; 32
 2c4:	80 b5       	in	r24, 0x20	; 32
 2c6:	82 60       	ori	r24, 0x02	; 2
 2c8:	80 bd       	out	0x20, r24	; 32
	UCSRC_Parity_Mode_Disable;
 2ca:	80 b5       	in	r24, 0x20	; 32
 2cc:	8f 7d       	andi	r24, 0xDF	; 223
 2ce:	80 bd       	out	0x20, r24	; 32
 2d0:	80 b5       	in	r24, 0x20	; 32
 2d2:	8f 7e       	andi	r24, 0xEF	; 239
 2d4:	80 bd       	out	0x20, r24	; 32
	UCSRC_USART_Register_Select_ON;
 2d6:	80 b5       	in	r24, 0x20	; 32
 2d8:	80 68       	ori	r24, 0x80	; 128
 2da:	80 bd       	out	0x20, r24	; 32
	UCSRC_1BIT_Stop_Select;
 2dc:	80 b5       	in	r24, 0x20	; 32
 2de:	87 7f       	andi	r24, 0xF7	; 247
 2e0:	80 bd       	out	0x20, r24	; 32
	
	
	USART_8MHz_Baud_Rate_9600;
 2e2:	10 bc       	out	0x20, r1	; 32
 2e4:	83 e3       	ldi	r24, 0x33	; 51
 2e6:	89 b9       	out	0x09, r24	; 9
 2e8:	08 95       	ret

000002ea <USART_TEST>:



void USART_TEST(void)
{
	while((UCSRA & 0x20) == 0x00);
 2ea:	5d 9b       	sbis	0x0b, 5	; 11
 2ec:	fe cf       	rjmp	.-4      	; 0x2ea <USART_TEST>
	UDR='a';	
 2ee:	81 e6       	ldi	r24, 0x61	; 97
 2f0:	8c b9       	out	0x0c, r24	; 12
 2f2:	08 95       	ret

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
